@page "/books/add"

@inject ILibraryService<BookModel> BookService
@inject ILibraryService<AuthorModel> AuthorService
@inject ILibraryService<GenreModel> GenreService
@inject NavigationManager NavigationManager

<h3>Add Book</h3>
<div>
    <EditForm Model="@_book" OnValidSubmit="@AddBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title" class="col-form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="_book.Title" />
        </div>
        <div class="form-group">
            <label for="authors" class="col-form-label">Authors</label>
            <AuthorSelect id="authors" class="form-control" AvailableAuthors="@_availableAuthors" @bind-SelectedAuthorIds="_selectedAuthorIds" />
        </div>
        <div class="form-group">
            <label for="genres" class="col-form-label">Genres</label>
            <GenreSelect id="genres" class="form-control" AvailableGenres="@_availableGenres" @bind-SelectedGenreIds="_selectedGenreIds" />
        </div>
        <div class="form-group">
            <label for="isbn" class="col-form-label">ISBN</label>
            <InputText id="isbn" class="form-control" @bind-Value="_book.Isbn" />
        </div>
        <div class="form-group">
            <label for="publishedDate" class="col-form-label">Published Year</label>
            <InputNumber TValue="int" id="publishedDate" class="form-control" @bind-Value="_book.PublicationYear" />
        </div>
        <div class="col-3">
        <button type="submit" class="btn btn-success">AddBook</button>
        </div>
    </EditForm>
</div>


@code {
    private BookModel _book = new();
    private List<int> _selectedAuthorIds = new();
    private List<int> _selectedGenreIds = new();
    private List<AuthorModel?> _availableAuthors = new();
    private List<GenreModel?> _availableGenres = new();

    protected override async Task OnInitializedAsync()
    {
        _availableAuthors = (await AuthorService.GetAllAsync())?.ToList() ?? new List<AuthorModel?>();
        _availableGenres = (await GenreService.GetAllAsync())?.ToList() ?? new List<GenreModel?>();
        await base.OnInitializedAsync();
    }

    private async Task AddBook()
    {
        foreach (var selectedAuthor in _selectedAuthorIds)
        {
            var author = await AuthorService.GetAsync(selectedAuthor);
            if (author != null)
                _book.Authors.Add(author);
        }
        foreach (var selectedGenreId in _selectedGenreIds)
        {
            var genre = await GenreService.GetAsync(selectedGenreId);
            if (genre != null)
                _book.Genres.Add(genre);
        }
        await BookService.AddAsync(_book);
        NavigationManager.NavigateTo("/books");
    }
}
