@page "/books"
@using BookLibrary.DAL.Entities

@inject IBookService BookService
@inject ILibraryService<BookModel> LibraryService
@inject NavigationManager NavigationManager
<h3>Books</h3>
@if (_books is not {Count: > 0})
{
    <p><em>Loading ....</em></p>
}
else
{
    <div class="table">
        <div class="row col-3">
            <button class="btn btn-success" @onclick="AddBook">Add Book</button>
            </div>
        @foreach (var book in _books)
        {
            <div class="row">
                @if (book == null){ continue; }
                <div class="col col-8">
                    <h4>@book.Title</h4>
                    @if (book.Authors is not {Count: >0 })
                    {
                        <p><em>No authors</em></p>
                    }
                    else
                    {
                        @foreach (var author in book.Authors)
                        {
                            <p>@author.FirstName, @author.LastName </p>
                            <br/>
                        }
                    }
                </div>
                <div class="col-1">
                    <button class="btn btn-outline-primary" @onclick="() => EditBook(book)">Edit</button>
                </div>
                <div class="col-1">
                    <button class="btn btn-outline-danger" @onclick="() => DeleteBook(book)">Delete</button>
                </div>
            </div>
        }
    </div>
}
@code {
    private ObservableCollection<BookModel?>? _books;

    protected override async Task OnInitializedAsync()
    {
        _books = new ObservableCollection<BookModel?>(await LibraryService.GetAllAsync() ?? null!);
    }

    private void AddBook()
    {
        NavigationManager.NavigateTo("/books/add");
    }

    private void EditBook(BookModel book)
    {
        NavigationManager.NavigateTo($"/books/edit/{book.Id}");
    }

    private async Task DeleteBook(BookModel book)
    {
        await LibraryService.DeleteAsync(book.Id);
        _books?.Remove(book);
    }
}